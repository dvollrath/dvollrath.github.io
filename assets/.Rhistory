p$LW <- p$LN/p$WN # create employee (L) to working-age population (W) ratio
View(p)
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-31-OECD-Europe.r")
p <- p[with(p, order(isocode, year)), ]
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-31-OECD-Europe.r")
figLW
# Do growth accounting and prepare figures of results
#########################################################################
# Housekeeping
#########################################################################
# Necessary packages, you may have to install
library(pwt10)
library(plotly)
library(htmlwidgets)
#########################################################################
# Pick an elasticity of GDP w.r.t. capital
#########################################################################
alpha <- 0.3 # look, there is no perfectly right answer here
lags <- 10 # how many years to look backwards at growth rates
#########################################################################
# Pull PWT into dataframe
#########################################################################
data("pwt10.0") # extracts PWT data into an object called pwt10.0
p <- pwt10.0 # copy PWT data for manipulation
#########################################################################
# Set up function to calculation growth rates at arbitrary lags for countries
# - Takes as given that you pass a PWT object with an isocode
#########################################################################
f.grate <- function(data,name,lags){
data$v <- data[[name]] # data series to do growth rate on
data$vlag <- lag(data$v,lags) # lag the data series
data$g <- (data$v/data$vlag)^(1/lags) - 1 # calculate the growth rate
data$isolag <- lag(data$isocode,lags) # lag the isocode
data$g[data$isocode != data$isolag] <- NA # replace with NA if eval goes x country
return(round(data$g,digits=4))
}
p$y <- p$rgdpna/p$pop # create log GDP per capita
p$KY <- p$rnna/p$rgdpna # create K/Y ratio
p$LN <- p$emp/p$pop # create employee (L) to pop (N) ratio
p$gy <- f.grate(p,"y",lags) # GDP per capita
p$gKY <- f.grate(p,"KY",lags) # capital/output ratio
p$gLN <- f.grate(p,"LN",lags) # emp/pop ratio
p$gavh <- f.grate(p,"avh",lags) # average hours worked
p$ged <- f.grate(p,"hc",lags) # this is actually just education
p$gA <- round(p$gy - (alpha/(1-alpha))*p$gKY - p$gLN - p$gavh - p$ged,digits=4) # productivity growth
p$gcap <- round((alpha/(1-alpha))*p$gKY,digits=4) # net capital term
p$ghc <- round(p$gLN + p$gavh + p$ged,digits=4) # sum of all HC terms
# Do growth accounting and prepare figures of results
#########################################################################
# Housekeeping
#########################################################################
# Necessary packages, you may have to install
library(pwt10)
library(plotly)
library(htmlwidgets)
#########################################################################
# Pick an elasticity of GDP w.r.t. capital
#########################################################################
alpha <- 0.3 # look, there is no perfectly right answer here
lags <- 10 # how many years to look backwards at growth rates
#########################################################################
# Pull PWT into dataframe
#########################################################################
data("pwt10.0") # extracts PWT data into an object called pwt10.0
p <- pwt10.0 # copy PWT data for manipulation
#########################################################################
# Set up function to calculation growth rates at arbitrary lags for countries
# - Takes as given that you pass a PWT object with an isocode
#########################################################################
f.grate <- function(data,name,lags){
data$v <- data[[name]] # data series to do growth rate on
data$vlag <- lag(data$v,lags) # lag the data series
data$g <- (data$v/data$vlag)^(1/lags) - 1 # calculate the growth rate
data$isolag <- lag(data$isocode,lags) # lag the isocode
data$g[data$isocode != data$isolag] <- NA # replace with NA if eval goes x country
return(round(data$g,digits=4))
}
p$y <- p$rgdpna/p$pop # create log GDP per capita
p$KY <- p$rnna/p$rgdpna # create K/Y ratio
p$LN <- p$emp/p$pop # create employee (L) to pop (N) ratio
p$gy <- f.grate(p,"y",lags) # GDP per capita
p$gKY <- f.grate(p,"KY",lags) # capital/output ratio
p$gLN <- f.grate(p,"LN",lags) # emp/pop ratio
p$gavh <- f.grate(p,"avh",lags) # average hours worked
p$ged <- f.grate(p,"hc",lags) # this is actually just education
p$gA <- round(p$gy - (alpha/(1-alpha))*p$gKY - p$gLN - p$gavh - p$ged,digits=4) # productivity growth
p$gcap <- round((alpha/(1-alpha))*p$gKY,digits=4) # net capital term
p$ghc <- round(p$gLN + p$gavh + p$ged,digits=4) # sum of all HC terms
#########################################################################
# Subset data for Europe and accounting terms
#########################################################################
europe <- p[which(p$isocode %in% c("USA","FRA","GBR","ESP","NLD","ITA","DEU")),]
france <- p[which(p$isocode %in% c("USA","FRA")),]
fig_france <- plot_ly(france, x = ~year, y = ~gy, linetype = ~isocode, type = 'scatter', mode = 'lines')
fig_france <- layout(fig_france, title = list(text = '10-year growth rate of GDP per capita', x=0),
xaxis = list(title = 'Year'),
yaxis = list (title = '10-year growth rate', range=c(-.01,.08)),
hovermode="x unified")
fig_france
p$v <- p$y
View(p)
View(p)
# Do growth accounting and prepare figures of results
#########################################################################
# Housekeeping
#########################################################################
# Necessary packages, you may have to install
library(pwt10)
library(plotly)
library(htmlwidgets)
#########################################################################
# Pick an elasticity of GDP w.r.t. capital
#########################################################################
alpha <- 0.3 # look, there is no perfectly right answer here
lags <- 10 # how many years to look backwards at growth rates
#########################################################################
# Pull PWT and OECD into dataframe
#########################################################################
# there is an OECD package to read data, but it is SLOOOOOWWWWWW.
o <- read.csv("~/dropbox/growthblog/dvollrath.github.io/assets/data/OECD_pop.csv", header=TRUE)
o <- o[which(o$LOCATION %in% c("USA","FRA","GBR","ESP","NLD","ITA","DEU")),] # select countries
o <- o[which(o$SEX %in% c("TT")),] # both sexes
o <- o[which(o$AGE %in% c("D1TTR5T2")),] # number of 20-64 year olds
o$WN <- 1/(1 + o$Value/100) # calculate 20-64 y.o (W) as percent of population (N)
o <- rename(o,c("isocode"="LOCATION")) # for merging
o <- rename(o,c("year"="Time")) # for merging
data("pwt10.0") # extracts PWT data into an object called pwt10.0
p <- pwt10.0 # copy PWT data for manipulation
p <- merge(o,p,by=c("isocode","year")) # merge with OECD age data
p$LN <- p$emp/p$pop # create employee (L) to pop (N) ratio
p$LW <- p$LN/p$WN # create employee (L) to working-age population (W) ratio
p <- p[with(p, order(isocode, year)), ]
View(p)
f.grate <- function(data,name,lags){
data$v <- data[[name]] # data series to do growth rate on
data$vlag <- lag(data$v,lags) # lag the data series
data$g <- (data$v/data$vlag)^(1/lags) - 1 # calculate the growth rate
data$isolag <- lag(data$isocode,lags) # lag the isocode
data$g[data$isocode != data$isolag] <- NA # replace with NA if eval goes x country
return(round(data$g,digits=4))
}
p$y <- p$rgdpna/p$pop # create log GDP per capita
p$KY <- p$rnna/p$rgdpna # create K/Y ratio
p$LN <- p$emp/p$pop # create employee (L) to pop (N) ratio
p$gy <- f.grate(p,"y",lags) # GDP per capita
p$gKY <- f.grate(p,"KY",lags) # capital/output ratio
p$gLN <- f.grate(p,"LN",lags) # emp/pop ratio
p$gLW <- f.grate(p,"LW",lags) # employee/working age ratio
p$gWN <- f.grate(p,"WN",lags) # working age/pop ratio
p$gavh <- f.grate(p,"avh",lags) # average hours worked
p$ged <- f.grate(p,"hc",lags) # this is actually just education
p$gA <- round(p$gy - (alpha/(1-alpha))*p$gKY - p$gLN - p$gavh - p$ged,digits=4) # productivity growth
p$gcap <- round((alpha/(1-alpha))*p$gKY,digits=4) # net capital term
p$ghc <- round(p$gLW + p$gWN + p$gavh + p$ged,digits=4) # sum of all HC terms
p$v <- p$y
p$vlag <-lag(p$v,10)
View(p)
p$vlag <- lag(p$v,10)
# Do growth accounting and prepare figures of results
#########################################################################
# Housekeeping
#########################################################################
# Necessary packages, you may have to install
library(pwt10)
library(plotly)
library(htmlwidgets)
#########################################################################
# Pick an elasticity of GDP w.r.t. capital
#########################################################################
alpha <- 0.3 # look, there is no perfectly right answer here
lags <- 10 # how many years to look backwards at growth rates
#########################################################################
# Pull PWT and OECD into dataframe
#########################################################################
# there is an OECD package to read data, but it is SLOOOOOWWWWWW.
o <- read.csv("~/dropbox/growthblog/dvollrath.github.io/assets/data/OECD_pop.csv", header=TRUE)
o <- o[which(o$LOCATION %in% c("USA","FRA","GBR","ESP","NLD","ITA","DEU")),] # select countries
o <- o[which(o$SEX %in% c("TT")),] # both sexes
o <- o[which(o$AGE %in% c("D1TTR5T2")),] # number of 20-64 year olds
o$WN <- 1/(1 + o$Value/100) # calculate 20-64 y.o (W) as percent of population (N)
o <- rename(o,c("isocode"="LOCATION")) # for merging
o <- rename(o,c("year"="Time")) # for merging
data("pwt10.0") # extracts PWT data into an object called pwt10.0
p <- pwt10.0 # copy PWT data for manipulation
p <- merge(o,p,by=c("isocode","year")) # merge with OECD age data
p$LN <- p$emp/p$pop # create employee (L) to pop (N) ratio
p$LW <- p$LN/p$WN # create employee (L) to working-age population (W) ratio
p <- p[with(p, order(isocode, year)), ]
p$vlag <- lag(p$y,10)
View(p)
p$isolag <- lag(p$isocode,10)
# Do growth accounting and prepare figures of results
#########################################################################
# Housekeeping
#########################################################################
# Necessary packages, you may have to install
library(pwt10)
library(plotly)
library(htmlwidgets)
library(dplyr)
#########################################################################
# Pick an elasticity of GDP w.r.t. capital
#########################################################################
alpha <- 0.3 # look, there is no perfectly right answer here
lags <- 10 # how many years to look backwards at growth rates
#########################################################################
# Pull PWT and OECD into dataframe
#########################################################################
# there is an OECD package to read data, but it is SLOOOOOWWWWWW.
o <- read.csv("~/dropbox/growthblog/dvollrath.github.io/assets/data/OECD_pop.csv", header=TRUE)
o <- o[which(o$LOCATION %in% c("USA","FRA","GBR","ESP","NLD","ITA","DEU")),] # select countries
o <- o[which(o$SEX %in% c("TT")),] # both sexes
o <- o[which(o$AGE %in% c("D1TTR5T2")),] # number of 20-64 year olds
o$WN <- 1/(1 + o$Value/100) # calculate 20-64 y.o (W) as percent of population (N)
o <- rename(o,c("isocode"="LOCATION")) # for merging
o <- rename(o,c("year"="Time")) # for merging
data("pwt10.0") # extracts PWT data into an object called pwt10.0
p <- pwt10.0 # copy PWT data for manipulation
p <- merge(o,p,by=c("isocode","year")) # merge with OECD age data
p$LN <- p$emp/p$pop # create employee (L) to pop (N) ratio
p$LW <- p$LN/p$WN # create employee (L) to working-age population (W) ratio
p <- p[with(p, order(isocode, year)), ]
#########################################################################
# Set up function to calculation growth rates at arbitrary lags for countries
# - Takes as given that you pass a PWT object with an isocode
#########################################################################
f.grate <- function(data,name,lags){
data$v <- data[[name]] # data series to do growth rate on
data$vlag <- lag(data$v,lags) # lag the data series
data$g <- (data$v/data$vlag)^(1/lags) - 1 # calculate the growth rate
data$isolag <- lag(data$isocode,lags) # lag the isocode
data$g[data$isocode != data$isolag] <- NA # replace with NA if eval goes x country
return(round(data$g,digits=4))
}
p$y <- p$rgdpna/p$pop # create log GDP per capita
p$KY <- p$rnna/p$rgdpna # create K/Y ratio
p$LN <- p$emp/p$pop # create employee (L) to pop (N) ratio
p$gy <- f.grate(p,"y",lags) # GDP per capita
p$gKY <- f.grate(p,"KY",lags) # capital/output ratio
p$gLN <- f.grate(p,"LN",lags) # emp/pop ratio
p$gLW <- f.grate(p,"LW",lags) # employee/working age ratio
p$gWN <- f.grate(p,"WN",lags) # working age/pop ratio
p$gavh <- f.grate(p,"avh",lags) # average hours worked
p$ged <- f.grate(p,"hc",lags) # this is actually just education
p$gA <- round(p$gy - (alpha/(1-alpha))*p$gKY - p$gLN - p$gavh - p$ged,digits=4) # productivity growth
p$gcap <- round((alpha/(1-alpha))*p$gKY,digits=4) # net capital term
p$ghc <- round(p$gLW + p$gWN + p$gavh + p$ged,digits=4) # sum of all HC terms
# Do growth accounting and prepare figures of results
#########################################################################
# Housekeeping
#########################################################################
# Necessary packages, you may have to install
library(pwt10)
library(plotly)
library(htmlwidgets)
library(dplyr)
#########################################################################
# Pick an elasticity of GDP w.r.t. capital
#########################################################################
alpha <- 0.3 # look, there is no perfectly right answer here
lags <- 10 # how many years to look backwards at growth rates
#########################################################################
# Pull PWT and OECD into dataframe
#########################################################################
# there is an OECD package to read data, but it is SLOOOOOWWWWWW.
o <- read.csv("~/dropbox/growthblog/dvollrath.github.io/assets/data/OECD_pop.csv", header=TRUE)
o <- o[which(o$LOCATION %in% c("USA","FRA","GBR","ESP","NLD","ITA","DEU")),] # select countries
o <- o[which(o$SEX %in% c("TT")),] # both sexes
o <- o[which(o$AGE %in% c("D1TTR5T2")),] # number of 20-64 year olds
o$WN <- 1/(1 + o$Value/100) # calculate 20-64 y.o (W) as percent of population (N)
o <- rename(o,c("isocode"="LOCATION")) # for merging
o <- rename(o,c("year"="Time")) # for merging
data("pwt10.0") # extracts PWT data into an object called pwt10.0
p <- pwt10.0 # copy PWT data for manipulation
p <- merge(o,p,by=c("isocode","year")) # merge with OECD age data
p$LN <- p$emp/p$pop # create employee (L) to pop (N) ratio
p$LW <- p$LN/p$WN # create employee (L) to working-age population (W) ratio
p <- p[with(p, order(isocode, year)), ]
#########################################################################
# Set up function to calculation growth rates at arbitrary lags for countries
# - Takes as given that you pass a PWT object with an isocode
#########################################################################
f.grate <- function(data,name,lags){
data$v <- data[[name]] # data series to do growth rate on
data$vlag <- dplyr::lag(data$v,lags) # lag the data series
data$g <- (data$v/data$vlag)^(1/lags) - 1 # calculate the growth rate
data$isolag <- lag(data$isocode,lags) # lag the isocode
data$g[data$isocode != data$isolag] <- NA # replace with NA if eval goes x country
return(round(data$g,digits=4))
}
p$y <- p$rgdpna/p$pop # create log GDP per capita
p$KY <- p$rnna/p$rgdpna # create K/Y ratio
p$LN <- p$emp/p$pop # create employee (L) to pop (N) ratio
p$gy <- f.grate(p,"y",lags) # GDP per capita
p$gKY <- f.grate(p,"KY",lags) # capital/output ratio
p$gLN <- f.grate(p,"LN",lags) # emp/pop ratio
p$gLW <- f.grate(p,"LW",lags) # employee/working age ratio
p$gWN <- f.grate(p,"WN",lags) # working age/pop ratio
p$gavh <- f.grate(p,"avh",lags) # average hours worked
p$ged <- f.grate(p,"hc",lags) # this is actually just education
p$gA <- round(p$gy - (alpha/(1-alpha))*p$gKY - p$gLN - p$gavh - p$ged,digits=4) # productivity growth
p$gcap <- round((alpha/(1-alpha))*p$gKY,digits=4) # net capital term
p$ghc <- round(p$gLW + p$gWN + p$gavh + p$ged,digits=4) # sum of all HC terms
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-31-OECD-Europe.r")
figWN
figLW
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-31-OECD-Europe.r")
figWN
figLW
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-31-OECD-Europe.r")
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-31-OECD-Europe.r")
figLN
figWN
figLW
ptable <- p[which(p$year %in% c("2017","2007","1997","1987","1977","1967")),]
tab <- plot_ly(type = 'table',
cells = list(
values = rbind(p$Country, p$year, p$gy),
align = c("center", "center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
tab
ptable <- p[which(p$year %in% c("2017","2007","1997","1987","1977","1967")),]
tab <- plot_ly(type = 'table',
cells = list(
values = rbind(ptable$Country, ptable$year, ptable$gy),
align = c("center", "center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
tab
ptable <- p[which(p$year %in% c("2017","2007","1997","1987","1977","1967")),]
tab <- plot_ly(type = 'table',
header = list(
values = c("Country","End year","GDP p.c."),
align = c("center", "center", "center"),
line = list(width = 1, color = 'black'),
fill = list(color = c("grey", "grey")),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(ptable$Country, ptable$year, ptable$gy),
align = c("center", "center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
tab
ptable <- p[which(p$year %in% c("2017","2007","1997","1987","1977","1967")),]
ptable$begin <- ptable$year - lags
tab <- plot_ly(type = 'table',
header = list(
values = c("Country","From","To","GDP p.c."),
align = c("center", "center", "center", "center"),
line = list(width = 1, color = 'black'),
fill = list(color = c("grey", "grey")),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(ptable$Country, ptable$begin, ptable$year, ptable$gy),
align = c("center", "center", "center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
tab
ptable <- p[which(p$year %in% c("2017","2007","1997","1987","1977","1967")),]
ptable$begin <- ptable$year - lags
tab <- plot_ly(type = 'table',
header = list(
values = c("Country","From","To","GDP p.c.", "Capital"),
#align = c("center", "center", "center", "center"),
line = list(width = 1, color = 'black'),
fill = list(color = c("grey", "grey")),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(ptable$Country, ptable$begin, ptable$year, ptable$gy, ptable$gKY),
#align = c("center", "center", "center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
tab
ptable <- p[which(p$year %in% c("2017","2007","1997","1987","1977","1967")),]
ptable$begin <- ptable$year - lags
ptable$gy <- ptable$gy*100
ptable$gKY <- ptable$gKY*100
tab <- plot_ly(type = 'table',
header = list(
values = c("Country","From","To","GDP p.c.", "Capital"),
#align = c("center", "center", "center", "center"),
line = list(width = 1, color = 'black'),
fill = list(color = c("grey", "grey")),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(ptable$Country, ptable$begin, ptable$year, ptable$gy, ptable$gKY),
#align = c("center", "center", "center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
tab
ptable <- p[which(p$year %in% c("2017","2007","1997","1987","1977","1967")),]
ptable$begin <- ptable$year - lags
ptable$gy <- sprintf("%.2f", ptable$gy*100)
ptable$gKY <- sprintf("%.2f", ptable$gKY*100)
tab <- plot_ly(type = 'table',
header = list(
values = c("Country","From","To","GDP p.c.", "Capital"),
#align = c("center", "center", "center", "center"),
line = list(width = 1, color = 'black'),
fill = list(color = c("grey", "grey")),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(ptable$Country, ptable$begin, ptable$year, ptable$gy, ptable$gKY),
#align = c("center", "center", "center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
tab
tab
ptable <- p[which(p$year %in% c("2017","2007","1997","1987","1977","1967")),]
ptable$begin <- ptable$year - lags
ptable$gy <- sprintf("%.2f", ptable$gy*100)
ptable$gKY <- sprintf("%.2f", ptable$gKY*100)
ptable$gA <- sprintf("%.2f", ptable$gA*100)
ptable$ged <- sprintf("%.2f", ptable$ged*100)
ptable$gavh <- sprintf("%.2f", ptable$gavh*100)
ptable$gLW <- sprintf("%.2f", ptable$gLW*100)
ptable$gWN <- sprintf("%.2f", ptable$gWN*100)
tab <- plot_ly(type = 'table',
header = list(
values = c("Country","From","To","GDP p.c.", "Capital", "Prod","Educ","Hours","LFP","Aging"),
#align = c("center", "center", "center", "center"),
line = list(width = 1, color = 'black'),
fill = list(color = c("grey", "grey")),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(ptable$Country, ptable$begin, ptable$year, ptable$gy, ptable$gKY, ptable$gA, ptable$ged, ptable$gavh, ptable$gLW, ptable$gWN),
#align = c("center", "center", "center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
tab
ptable <- p[which(p$year %in% c("2017","2007","1997","1987","1977","1967")),]
ptable$begin <- ptable$year - lags
ptable$gy <- sprintf("%.2f", ptable$gy*100)
ptable$gKY <- sprintf("%.2f", ptable$gKY*100)
ptable$gA <- sprintf("%.2f", ptable$gA*100)
ptable$ged <- sprintf("%.2f", ptable$ged*100)
ptable$gavh <- sprintf("%.2f", ptable$gavh*100)
ptable$gLW <- sprintf("%.2f", ptable$gLW*100)
ptable$gWN <- sprintf("%.2f", ptable$gWN*100)
tab <- plot_ly(type = 'table',
header = list(
values = c("Country","From","To","GDP p.c.", "Capital", "Prod","Educ","Hours","LFP","Aging"),
#align = c("center", "center", "center", "center"),
line = list(width = 1, color = 'black'),
fill = list(color = c("grey", "grey")),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(ptable$Country, ptable$begin, ptable$year, ptable$gy, ptable$gKY, ptable$gA, ptable$ged, ptable$gavh, ptable$gLW, ptable$gWN),
#align = c("center", "center", "center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
saveWidget(partial_bundle(tab), "./plotly/tab_europe_LN.html",selfcontained = F, libdir = "lib")
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-31-OECD-Europe.r")
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-31-OECD-Europe.r")
tab <- plot_ly(type = 'table',
header = list(
values = c("Country","From","To","GDP p.c.", "Capital", "Prod","Educ","Hours","LFP","Aging"),
#align = c("center", "center", "center", "center"),
line = list(width = 1, color = 'black'),
fill = list(color = c("grey", "grey")),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(ptable$Country, ptable$begin, ptable$year, ptable$gy, ptable$gKY, ptable$gA, ptable$ged, ptable$gavh, ptable$gLW, ptable$gWN),
#align = c("center", "center", "center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
saveWidget(partial_bundle(tab), "./plotly/tab_europe.html",selfcontained = F, libdir = "lib")
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-29-PWT-Europe.r")
fig_ed
fig_avh
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-31-OECD-Europe.r")
figWN
figLW
tab
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-31-OECD-Europe.r")
tab
figLW
figWN
tab
figgA
fig_prod
source("~/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-29-PWT-Europe.r")
fig_europe
fig_prod
source("~/Library/CloudStorage/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-29-PWT-Europe.r")
source("~/Library/CloudStorage/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-29-PWT-Europe.r")
source("~/Library/CloudStorage/Dropbox/GrowthBlog/dvollrath.github.io/assets/2022-12-29-PWT-Europe.r")
install.packages("webshot")
plotly::export(p = fig_europe, file = "./figures/fig_europe.png")
library(webshot)
plotly::export(p = fig_europe, file = "./figures/fig_europe.png")
fig_europe
save_image(fig_europe, "./figures/fig_europe.png")
